generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  firstName    String
  lastName     String
  role         Role          @default(USER)
  authProvider AuthProvider  @default(EMAIL)
  password     String?
  avatar       String?
  applications Application[]
  judge        Judge?
  projects     Project[]     @relation("ProjectToUser")

}

model Application {
  id              String  @id @default(uuid())
  gender          String
  pronous         String
  age             Int
  ethnicity       String
  gradYear        Int
  phoneNumber     String  @unique
  school          String
  city            String
  state           String
  country         String
  educationLevel  String
  major           String
  diet            String
  shirtSize       String
  sleep           Boolean
  github          String
  linkedin        String
  portfolio       String
  whyBostonhacks  String
  userId          String
  applicationYear Int
  status          Status  @default(PENDING)
  user            User    @relation(fields: [userId], references: [id])
}

model Project {
  id            String   @id @default(uuid())
  name          String
  description   String
  repositoryUrl String
  technologies  String[]
  year          Int
  track         String?
  demoUrl       String?
  devpostUrl    String?
  teamName      String
  isWinner      Boolean  @default(false)
  prizeWon      String?
  placement     Int?
  scores        Score[]
  members       User[]   @relation("ProjectToUser")
}

model Judge {
  id         String   @id @default(uuid())
  userId     String   @unique
  accessCode String   @unique
  tracks     String[] @default(["all"])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  year       Int?     @default(2025)
  user       User     @relation(fields: [userId], references: [id])
  scores     Score[]
}

model Score {
  id         String   @id @default(uuid())
  judgeId    String
  projectId  String
  scoreData  Json
  comments   String?
  totalScore Float    @default(0.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  judge      Judge    @relation(fields: [judgeId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])

  @@unique([judgeId, projectId])
}

model JudgingCriteria {
  id           String   @id @default(uuid())
  year         Int
  event        String   @default("BostonHacks")
  criteriaList Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([year, event])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  WAITLISTED
  REJECTED
}

enum AuthProvider {
  EMAIL
  FACEBOOK
  GOOGLE
}
