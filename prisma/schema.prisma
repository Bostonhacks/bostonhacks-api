datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  firstName    String
  lastName     String
  avatar       String?
  role         Role          @default(USER)
  applications Application[]
  projects     Project[]
  authProvider AuthProvider  @default(EMAIL)
  password     String?
  judge        Judge? // one to one relationship with judge
}

model Application {
  id              String  @id @default(uuid())
  gender          String
  pronouns        String
  age             Int
  ethnicity       String
  gradYear        Int
  phoneNumber     String
  school          String
  city            String
  state           String
  country         String
  educationLevel  String
  major           String
  diet            String
  shirtSize       String
  sleep           Boolean
  github          String
  linkedin        String
  portfolio       String
  whyBostonhacks  String
  resumeUrl       String // defaults to showing just file name since get resume url is used to get the one time url
  applicationYear Int
  user            User    @relation(fields: [userId], references: [id])
  userId          String
  status          Status  @default(PENDING)

  @@index([userId])
  @@index([applicationYear])
  @@index([status])
  @@index([applicationYear, status])
}

model Project {
  id            String   @id @default(uuid())
  name          String
  description   String
  repositoryUrl String
  technologies  String[]
  year          Int
  members       User[]
  track         String?
  demoUrl       String?
  devpostUrl    String?
  teamName      String
  isWinner      Boolean  @default(false)
  prizeWon      String?
  placement     Int? // placement of project (1, 2, 3, ...)
  // possibly add points here
  scores        Score[]

  @@index([year])
  @@index([isWinner])
  @@index([year, isWinner])
  @@index([track])
  @@index([placement])
}

model Judge {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  accessCode String   @unique // Gives them access to judge for this year
  tracks     String[] @default(["all"]) // Tracks they are responsible for judging
  scores     Score[] // Scores they've given
  year       Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([year])
  @@index([accessCode])
}

model Score {
  id         String   @id @default(uuid())
  judge      Judge    @relation(fields: [judgeId], references: [id])
  judgeId    String
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  // Dynamic scoring criteria stored as JSON
  scoreData  Json // Store all criteria and scores as JSON
  comments   String?
  totalScore Float    @default(0.0) // Calculated total score
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([judgeId, projectId]) // Each judge can only score a project once
  @@index([totalScore])
  @@index([judgeId])
  @@index([projectId])
  @@index([createdAt])
}

model JudgingCriteria {
  id           String   @id @default(uuid())
  year         Int
  event        String   @default("BostonHacks")
  criteriaList Json // List of criteria and their weights
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([year, event]) // Each event-year combination has one set of criteria
  @@index([year])
  @@index([event])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  WAITLISTED
  REJECTED
}

enum AuthProvider {
  EMAIL
  FACEBOOK
  GOOGLE
}
